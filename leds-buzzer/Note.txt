
= how does it connect to SOC =
1, leds
+------+--------+--------+--------+--------+
| Name | nLED_1 | nLED_2 | nLED_3 | nLED_4 |
+------+--------+--------+--------+--------+
| GPIO | GPB5   | GPB6   | GPB7   | GPB8   |
| Func | nXBACK | nXREQ  | nXDACK1| nDREQ1 |
+------+--------+--------+--------+--------+

2, Buzzer
                        VDD5V
                        |__
                         __Buzzer
     GPB0    R34=2K     /
  Vi ---------^^^^-----|
                        \>
                        GND

= how to play it =
1, leds: low level enable
2, buzzer: PWM
	Vi = low, off
	Vi = high, on

= how to configure =
1, GPB control register
+----------+------------+-----+-------------------+-------------+
| reg name | address    | R/W | description       | reset value |
+----------+------------+-----+-------------------+-------------+
| GPBCON   | 0x56000010 | rw  | configure GPBs    | 0x0         |
| GPBDAT   | 0x56000014 | rw  | data reg for GPBs | undefine    |
| GPBUP    | 0x56000018 | rw  | pull-up disable   | 0x0         |
+----------+------------+-----+-------------------+-------------+

2, GPB0~GPB10 functions
+--------+---------+-----------------------------------------------+
| GPBCON | Bit     | description                                   |
+--------+---------+-----------------------------------------------+
| GPB8   | [17:16] | 00=input, 01=output, 10=nXDREQ1, 11=reserved  |
| GPB7   | [15:14] | 00=input, 01=output, 10=nXDACK1, 11=reserved  |
| GPB6   | [13:12] | 00=input, 01=output, 10=nXBREQ,  11=reserved  |
| GPB5   | [11:10] | 00=input, 01=output, 10=nXBACK,  11=reserved  |
| GPB0   | [ 1:0 ] | 00=input, 01=output, 10=TOUT0,   11=reserved  |
+--------+---------+-----------------------------------------------+

3, state control
+-----------+---------+-----------------------------------------------+
| GPBDAT    | Bit     | description                                   |
+-----------+---------+-----------------------------------------------+
| GPB[10:0] | [10:0]  | config as input: show pins state (read)       |
|           |         | config as output: set pins state (write)      |
|           |         | config as func: undefined value will be read  |
+-----------+---------+-----------------------------------------------+

4, GPBUP
	pull up function.
	灌电流: input current
	拉电流: output current

= result =
*GPBCON &= ~(3 << 16 | 3 << 14 | 3 << 12 | 3 << 10 | 3 << 0)
*GPBCON |=  (1 << 16 | 1 << 14 | 1 << 12 | 1 << 10 | 1 << 0)
*GPBUP &= ~(1 << 8 | 1 << 7 | 1 << 6 | 1 << 5 | 1 << 0)

	p.s.
		So far, GPB0 configure as output, not PWM.

= pwm timer =
1, GPB0 configure as TOUT0 function.
2, 
									  TCMPB0  TCNTB0
									    |       |
Pclk----> prescaler-----> divider-----> ctrl logic-----> TOUT0
12MHz     8-bits          1/2
          0~255           1/4           0 ~ 65535
						  1/8
						  1/16
						  TCLK0

3, registers
+-------+------------+------------------------------------+-------------+
| reg   | adress     | description                        | reset value |
+-------+------------+------------------------------------+-------------+
| TCFG0 | 0x51000000 | [23:16] dead zone len              | 0x00        |
|       |            | [7:0] prescaler for timer0,1       | 0x00        |
+-------+------------+------------------------------------+-------------+
| TCFG1 | 0x51000004 | [23:16] 0000:all interrupt         | 0x0000      |
|       |            |         0001:timer0 DMA mode       |             |
|       |            | [3:0] MUX input for pwm timer0     | 0x0000      |
|       |            |   0000:1/2; 0001:1/4; 0010:1/8;    |             |
|       |            |   0011:1/16; 01xx:External TCLK0   |             |
+-------+------------+------------------------------------+-------------+
| TCON  | 0x51000008 | [4] dead zone:0=disable, 1=enable  | 0x0         |
|       |            | [3] 0: One-shot; 1: auto reload    | 0x0         |
|       |            | [2] 0: inverter off; 1: on         | 0x0         |
|       |            | [1] 0: no opt; 1: update TCNTB0 &  | 0x0         |
|       |            | [0] 0: stop; 1: start Timer0       | 0x0         |
+-------+------------+------------------------------------+-------------+

4, ctrl flow:
	i), init TCNTB0 and TCMPB0
	ii), set update timer manual.
	iii), start timer0, and clear manual update bit.

5, pitch and bit map
                     Bits Map
 +----------+-----+-----+-----+-----+------------+----------+
 | reserved | beat                  | level      | pitch    |
 +----------+-----+-----+-----+-----+------------+----------+
 | 31 ~ 12  | 11  | 10  |  9  |  8  | 7 ~ 4      | 3 ~ 0    |
 +----------+-----+-----+-----+-----+------------+----------+
 |          | 1/16| 1/8 | 1/4 | 1/2 | 0000: migh | 0 ~ 7    |
 +----------+-----+-----+-----+-----+ 0001: low  +----------+
                                    | 0010: high |
                                    +------------+

https://zh.wikipedia.org/wiki/%E9%9F%B3%E7%AC%A6
http://zh.wikipedia.org/wiki/%E9%9F%B3%E9%AB%98

6,
  __   __
__| |__| |__
  \   /
	T
f = 1/T
f = Pclk/(prescaler*divider*tcntb0)
divider*tcntb0 = Pclk/(f*prescaler)

7,
prescaler = 2, 4, 8, 16
divider = 0~255
tcntb0 = 0~65535
Note: 1=4D
+------+-------+---------+-----------+---------+---------+
| name | level | req(Hz) | prescaler | divider | tcntb0  |
+------+-------+---------+-----------+---------+---------+
| do   | migh  | 293.66  | 8         | 0       | 5108    |
| re   | migh  | 329.63  | 8         | 0       | 4551    |
| mi   | migh  | 349.23  | 8         | 0       | 4295    |
| fa   | migh  | 392.00  | 8         | 0       | 3827    |
| sol  | migh  | 440,00  | 8         | 0       | 3409    |
| la   | migh  | 493.88  | 8         | 0       | 3037    |
| si   | migh  | 523.25  | 8         | 0       | 2867    |
+------+-------+---------+-----------+---------+---------+

p.s
	if low pitch, prescaler = 1/16;
	if migh pitch, prescaler = 1/8;
	if high pith, prescaler = 1/4;
	So, we only calculate migh pitchs config table. Then set prescaler
		according to bit[4:7] in pitch bits map.

8, code flow
	a) load next pitch
		- store offset into memory
		- if the last, clear offset and turn around
	b) load pwm configure info
		- accroding the value of pitch bit[3:0](do,re,mi,fa,sol,la,si)
	c) check low/migh/high pitch?
		- accroding the value of pitch bit[7:4](see bits map)
		- then update divider(1/2, 1/4, 1/8, 1/16)
	d) update pwm timer0
	e) calc delay
		- accroding to the value of pitch bit[11:8]
	f) light leds
		- stroe counter into memory
	g) goto (a)

9, happy goddess
= original =
3, 3, 4, 5,  5, 4, 3, 2,        1, 1, 2, 3,       3., 2_, 2, 2
3, 3, 4, 5,  5, 4, 3, 2,        1, 1, 2, 3,       2., 1_, 1, 1
2, 2, 3, 1,  2, 3_, 4_, 3, 1,   2, 3_, 4_, 3, 2,  1, 2, 5low, 3
3, 3, 4, 5,  5, 4, 3, 4_,  2_,  1, 1, 2, 3,       2., 1_, 1, 1

= encoded =
3, 3, 4, 5,  5, 4, 3, 2,        1, 1, 2, 3,       3, 3+(1<<8), 2+(1<<8), 2, 2
3, 3, 4, 5,  5, 4, 3, 2,        1, 1, 2, 3,       2, 2+(1<<8), 1+(1<<8), 1, 1
2, 2, 3, 1,  2, 3+(1<<8), 4+(1<<8), 3, 1,   2, 3+(1<<8), 4+(1<<8), 3, 2,  1, 2, 5+(1<<4), 3
3, 3, 4, 5,  5, 4, 3, 4+(1<<8), 2+(1<<8),  1, 1, 2, 3,       2, 2+(1<<8), 1+(1<<8), 1, 1
